name: Continuous Delivery / Binaries

permissions:
  contents: write

on:
  release:
    types: [published]
  pull_request:
    branches: [main]

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  upload-assets:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04-arm
          # - target: aarch64-apple-darwin
          #   os: macos-12
          # - target: aarch64-pc-windows-msvc
          #   os: windows-2022
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          # - target: x86_64-pc-windows-msvc
          #   os: windows-2022
          # - target: x86_64-unknown-freebsd
          #   os: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      # - name: Install dependencies on Linux
      #   if: contains(matrix.os, 'freebsd')
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libpq-dev libsqlite3-dev

      # - name: Install dependencies on macOS
      #   if: startsWith(matrix.os, 'macos')
      #   run: |
      #     brew update
      #     brew install libpq sqlite3

      # - name: Install dependencies on Windows
      #   if: startsWith(matrix.os, 'windows')
      #   run: |
      #     choco install postgresql libsqlite3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')

      - uses: taiki-e/install-action@cross
        if: contains(matrix.target, '-musl')

      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
          vcpkg install openssl:x64-windows-static-md
        if: startsWith(matrix.os, 'windows')

      - run : |
          sudo apt update -y && \
          sudo apt install -y libssl-dev libpq-dev libsqlite3-dev
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      # - run : |
      #     brew update
      #     brew install postgresql@14
      #     HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install sqlite
      #   if: startsWith(matrix.os, 'macos')


      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: autopulse
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          features: ${{ contains(matrix.target, '-musl') && 'vendored' || '' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: ${{ github.event_name == 'pull_request' }}