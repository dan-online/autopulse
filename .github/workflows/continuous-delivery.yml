name: Continuous Delivery / Binaries

permissions:
  contents: write

on:
  release:
    types: [published]
  pull_request:
    branches: [main]

concurrency:
  group: continuous-delivery-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  upload-assets:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04-arm
          # - target: aarch64-apple-darwin
          #   os: macos-12
          # - target: aarch64-pc-windows-msvc
          #   os: windows-2022
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04

          - target: x86_64-pc-windows-msvc
            os: windows-2025
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          # - target: x86_64-pc-windows-msvc
          #   os: windows-2022
          # - target: x86_64-unknown-freebsd
          #   os: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v5

      # - name: Install dependencies on Linux
      #   if: contains(matrix.os, 'freebsd')
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libpq-dev libsqlite3-dev

      # - name: Install dependencies on macOS
      #   if: startsWith(matrix.os, 'macos')
      #   run: |
      #     brew update
      #     brew install libpq sqlite3

      # - name: Install dependencies on Windows
      #   if: startsWith(matrix.os, 'windows')
      #   run: |
      #     choco install postgresql libsqlite3

      - name: Cargo Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-full-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ matrix.target }}-full-

      - name: Install Rust toolchain
        uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: stable
          component: rustfmt,clippy
          target: ${{ matrix.target }}

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      # - uses: taiki-e/install-action@cross
      #   if: contains(matrix.target, '-musl')

      # - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
      #   if: endsWith(matrix.target, 'windows-msvc')

      # - run: |
      #     echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
      #     vcpkg install openssl:x64-windows-static-md
      #   if: startsWith(matrix.os, 'windows')

      - run : |
          sudo apt update -y && \
          sudo apt install -y libssl-dev libpq-dev libsqlite3-dev
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md

      - name: Install sqlite (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          choco install sqlite
          cd /D C:\ProgramData\chocolatey\lib\SQLite\tools
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib

      - name: Set variables for sqlite (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_PATH
          echo "SQLITE3_LIB_DIR=C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_ENV
          echo "SQLITE_DATABASE_URL=C:\test.db" >> $GITHUB_ENV

      - name: Install postgres (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install postgresql14 --force --params '/Password:root'
          echo "OPENSSL_RUST_USE_NASM=0" >> $GITHUB_ENV
          echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
          echo "PQ_LIB_DIR=C:\Program Files\PostgreSQL\14\lib" >> $GITHUB_ENV
          echo "PG_DATABASE_URL=postgres://postgres:root@localhost/" >> $GITHUB_ENV
          echo "PG_EXAMPLE_DATABASE_URL=postgres://postgres:root@localhost/diesel_example" >> $GITHUB_ENV

      # - run : |
      #     brew update
      #     brew install postgresql@14
      #     HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install sqlite
      #   if: startsWith(matrix.os, 'macos')

      - uses: taiki-e/upload-rust-binary-action@main
        with:
          bin: autopulse
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          features: ${{ (contains(matrix.target, '-musl') || startsWith(matrix.os, 'windows')) && 'vendored' || '' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: ${{ github.event_name == 'pull_request' }}