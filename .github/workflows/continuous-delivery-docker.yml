name: Continuous Delivery / Docker

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]

concurrency:
  group: continuous-delivery-docker-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  push_readme:
    name: Push README to Docker Hub
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Push README to Docker Hub
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          destination_container_repo: danonline/autopulse
          provider: dockerhub
          short_description: 'ðŸ’« bridge your media server'
          readme_file: 'README.md'
  
  build_ui:
    name: Build UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (labels, tags)
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            prefix=ui,onlatest=true

      - name: Build and push (ui)
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ui/
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Push Docker Image
      #   run: |
      #     docker tag ${{ steps.meta.outputs.tags }} danonline/autopulse-ui:${{ steps.meta.outputs.tags }}
      #     docker push danonline/autopulse-ui:${{ steps.meta.outputs.tags }}

  build:
    name: Build - ${{ matrix.platform.name }} - ${{ matrix.feature }}
    strategy:
      matrix:
        feature:
          - full
          - postgres
          - sqlite
        platform:
          - name: linux/amd64
            runner: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            tag: -amd64
          - name: linux/arm64
            runner: ubuntu-22.04-arm
            target: aarch64-unknown-linux-musl
            tag: -arm64
            build_args: |
              IMAGE_TAG=arm64v8-3.20
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - uses: actions/checkout@v4

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (labels)
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Cargo Cache
        if: matrix.feature == 'full'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ matrix.platform.target }}-${{ matrix.feature }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ matrix.platform.target }}-full-

      - name: Cargo Cache
        if: matrix.feature != 'full'
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ matrix.platform.target }}-${{ matrix.feature }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ matrix.platform.target }}-full-

      - name: Pull Request suffix
        run: |
          if [ -n "${{ github.event.number }}" ]; then
            echo "PR number: ${{ github.event.number }}"
            echo "tag=pr-${{ github.event.number }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            echo "Release tag: ${{ github.event.release.tag_name }}"
            echo "tag=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "Not a PR branch"
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi
        id: tag

      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: stable
          component: rustfmt,clippy
          target: ${{ matrix.platform.target }}

      - uses: taiki-e/setup-cross-toolchain-action@main
        with:
          target: ${{ matrix.platform.target }}

      - name: Test binary
        if: matrix.feature == 'full'
        run: cargo test --locked --release --features vendored --target ${{ matrix.platform.target }} --workspace

      - name: Build binary
        if: matrix.feature == 'full'
        run: cargo build --locked --release --features vendored --target ${{ matrix.platform.target }}

      - name: Test binary
        if: matrix.feature != 'full'
        run: cargo test --locked --release --no-default-features --features vendored,${{ matrix.feature }} --target ${{ matrix.platform.target }} --workspace

      - name: Build binary
        if: matrix.feature != 'full'
        run: cargo build --locked --release --no-default-features --features vendored,${{ matrix.feature }} --target ${{ matrix.platform.target }}

      - name: Copy binary
        run: |
          cp target/${{ matrix.platform.target }}/release/autopulse ./autopulse

          file ./autopulse

      # "latest-platform?" tag, full feature-set
      - name: Create Docker Image
        uses: docker/build-push-action@v6
        if: matrix.feature == 'full'
        with:
          push: true
          context: .
          tags: |
            ghcr.io/dan-online/autopulse:${{ steps.tag.outputs.tag }}${{ matrix.platform.tag }}
            danonline/autopulse:${{ steps.tag.outputs.tag }}${{ matrix.platform.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform.name }}
          build-args: ${{ matrix.platform.build_args }}

      # "feature-platform?" tag, selected feature-set
      - name: Build and push
        uses: docker/build-push-action@v6
        if: matrix.feature != 'full'
        with:
          push: true
          context: .
          tags: |
            ghcr.io/dan-online/autopulse:${{ steps.tag.outputs.tag }}-${{ matrix.feature }}${{ matrix.platform.tag }}
            danonline/autopulse:${{ steps.tag.outputs.tag }}-${{ matrix.feature }}${{ matrix.platform.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform.name }}
          build-args: ${{ matrix.platform.build_args }}

      
      
  manifest:
    name: Push manifest
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Pull Request suffix
        run: |
          if [ -n "${{ github.event.number }}" ]; then
            echo "PR number: ${{ github.event.number }}"
            echo "tag=pr-${{ github.event.number }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            echo "Release tag: ${{ github.event.release.tag_name }}"
            echo "tag=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "Not a PR branch"
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi
        id: tag

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifests
        run: |
          BASES="ghcr.io/dan-online/autopulse danonline/autopulse"

          for base in $BASES; do
            # Extract digests for each architecture
            AMD64_DIGEST=$(docker manifest inspect ${base}:${{ steps.tag.outputs.tag }}-amd64 | jq -r '.manifests[0].digest')
            ARM64_DIGEST=$(docker manifest inspect ${base}:${{ steps.tag.outputs.tag }}-arm64 | jq -r '.manifests[0].digest')

            POSTGRES_AMD64_DIGEST=$(docker manifest inspect ${base}:${{ steps.tag.outputs.tag }}-postgres-amd64 | jq -r '.manifests[0].digest')
            POSTGRES_ARM64_DIGEST=$(docker manifest inspect ${base}:${{ steps.tag.outputs.tag }}-postgres-arm64 | jq -r '.manifests[0].digest')

            SQLITE_AMD64_DIGEST=$(docker manifest inspect ${base}:${{ steps.tag.outputs.tag }}-sqlite-amd64 | jq -r '.manifests[0].digest')
            SQLITE_ARM64_DIGEST=$(docker manifest inspect ${base}:${{ steps.tag.outputs.tag }}-sqlite-arm64 | jq -r '.manifests[0].digest')

            # Root: latest/pr-<number>
            docker manifest create ${base}:${{ steps.tag.outputs.tag }} \
                --amend ${base}@${AMD64_DIGEST} \
                --amend ${base}@${ARM64_DIGEST}

            docker manifest push ${base}:${{ steps.tag.outputs.tag }}

            # Postgres: latest-postgres/pr-<number>-postgres
            docker manifest create ${base}:${{ steps.tag.outputs.tag }}-postgres \
                --amend ${base}@${POSTGRES_AMD64_DIGEST} \
                --amend ${base}@${POSTGRES_ARM64_DIGEST}

            docker manifest push ${base}:${{ steps.tag.outputs.tag }}-postgres

            # SQLite: latest-sqlite/pr-<number>-sqlite
            docker manifest create ${base}:${{ steps.tag.outputs.tag }}-sqlite \
                --amend ${base}@${SQLITE_AMD64_DIGEST} \
                --amend ${base}@${SQLITE_ARM64_DIGEST}

            docker manifest push ${base}:${{ steps.tag.outputs.tag }}-sqlite

          done
