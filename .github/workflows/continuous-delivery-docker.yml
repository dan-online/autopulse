name: Continuous Delivery / Docker

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]

jobs:
  push_readme:
    name: Push README to Docker Hub
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Push README to Docker Hub
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          destination_container_repo: danonline/autopulse
          provider: dockerhub
          short_description: 'ðŸ’« bridge your media server'
          readme_file: 'README.md'
  
  build:
    name: Build - ${{ matrix.platform.name }} - ${{ matrix.feature }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature:
          - full
          - postgres
          - sqlite
        platform:
          - name: linux/amd64
            target: x86_64-unknown-linux-musl
            build_image: clux/muslrust:stable
          - name: linux/arm64
            target: aarch64-unknown-linux-musl
            tag: -arm64
            build_image: clux/muslrust:arm64-1.81.0-stable-2024-10-09
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull Request suffix
        run: |
          if [ -n "${{ github.event.number }}" ]; then
            echo "PR number: ${{ github.event.number }}"
            echo "tag=pr-${{ github.event.number }}" >> "$GITHUB_OUTPUT"
            echo "uitag=ui-pr-${{ github.event.number }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            echo "Release tag: ${{ github.event.release.tag_name }}"
            echo "tag=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
            echo "uitag=ui-${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "Not a PR branch"
            echo "tag=latest" >> "$GITHUB_OUTPUT"
            echo "uitag=ui" >> "$GITHUB_OUTPUT"
          fi

        id: tag

      - name: Build and push
        uses: docker/build-push-action@v6
        if: matrix.feature == 'full' && matrix.arch.build == 'clux/muslrust:stable'
        with:
          push: true
          tags: |
            danonline/autopulse:${{ steps.tag.outputs.tag }}
          file: Dockerfile.alpine
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push (ui)
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: danonline/autopulse:${{ steps.tag.outputs.uitag }}
          context: ui/
          cache-from: type=gha
          cache-to: type=gha,mode=max)
        
      - name: Build and push
        uses: docker/build-push-action@v6
        if: matrix.feature == 'full'
        with:
          push: true
          tags: |
            danonline/autopulse:${{ steps.tag.outputs.tag }}${{ matrix.platform.tag }}
          file: Dockerfile.alpine
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform.name }}
          build-args: |
            TARGET=${{ matrix.platform.target }}
            BUILD_IMAGE=${{ matrix.platform.build_image }}

      - name: Build and push
        uses: docker/build-push-action@v6
        if: matrix.feature != 'full'
        with:
          push: true
          tags: |
            danonline/autopulse:${{ steps.tag.outputs.tag }}-${{ matrix.feature }}${{ matrix.platform.tag }}
          file: Dockerfile.alpine
          cache-from: |
            type=registry,ref=danonline/autopulse:${{ steps.tag.outputs.tag }}
            type=gha
          # cache-to: type=gha,mode=max
          build-args: |
            ENABLED_FEATURES=${{ matrix.feature }}
            TARGET=${{ matrix.platform.target }}
            BUILD_IMAGE=${{ matrix.platform.build_image }}
          platforms: ${{ matrix.platform.name }}
