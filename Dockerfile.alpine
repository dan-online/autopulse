# Install cargo-chef for a base step
FROM --platform=$BUILDPLATFORM clux/muslrust:stable AS chef
USER root
RUN cargo install cargo-chef
WORKDIR /app

# Plan out the build
FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json --features ${ENABLED_FEATURES}

FROM chef AS builder

COPY --from=planner /app/recipe.json recipe.json

# Database support: postgres, sqlite
ARG ENABLED_FEATURES="postgres,sqlite"
ARG TARGET="x86_64-unknown-linux-musl"

# if target is not x86_64-unknown-linux-musl, we need to cross compile
RUN if [ "${TARGET}" != "x86_64-unknown-linux-musl" ]; then rustup target add ${TARGET}; fi

# Manually set the linker environment variable for specific targets
RUN if [ "${TARGET}" = "x86_64-unknown-linux-musl" ]; then \
      export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc; \
    elif [ "${TARGET}" = "aarch64-unknown-linux-musl" ]; then \
      export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc; \
    fi


RUN cargo chef cook --release --target ${TARGET} --recipe-path recipe.json --features ${ENABLED_FEATURES}

# Compile dependencies
COPY Cargo.toml Cargo.lock ./

# Copy source and build
COPY src src
COPY migrations migrations
COPY README.md README.md

<<<<<<< HEAD
RUN cargo build --release --target ${TARGET} --no-default-features --features ${ENABLED_FEATURES}
=======
# Add file to include
ADD default.toml default.toml

<<<<<<< HEAD
RUN cargo build --release --target x86_64-unknown-linux-musl --no-default-features --features ${ENABLED_FEATURES}
>>>>>>> 93d7eaa (chore(docker): hard-code target)
=======
RUN cargo build --release --target ${TARGET} --no-default-features --features ${ENABLED_FEATURES}
>>>>>>> df21a80 (chore(docker): use correct target)

RUN cp target/${TARGET}/release/autopulse /tmp/autopulse

FROM alpine AS runtime

WORKDIR /app

# RUN addgroup -S user && adduser -S user -G user

COPY --from=builder /tmp/autopulse /usr/local/bin/

# RUN chown -R user:user /app

# USER user

CMD ["/usr/local/bin/autopulse"]